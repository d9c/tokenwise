Creating a simple React component that displays "Hello World" can be done in a few different ways, depending on whether you want to use a class component or a functional component. Below, I'll show you how to create both types using modern React practices. ### Functional Component Functional components are the more modern and recommended way to write components in React as of the latest updates. Here's how you can create a simple functional component: ```jsx import React from 'react'; function HelloWorld() { return <h1>Hello World</h1>; } export default HelloWorld; ``` ### Class Component Class components are the older style of writing React components. They are still in use, especially in older codebases, but for new code, functional components are generally preferred. Here's how you can create a class component that does the same thing: ```jsx import React, { Component } from 'react'; class HelloWorld extends Component { render() { return <h1>Hello World</h1>; } } export default HelloWorld; ``` ### Usage To use this component in your React application, you would typically import it into your `App.js` file (or wherever you manage your component hierarchy) and include it like any other component: ```jsx import React from 'react'; import HelloWorld from './HelloWorld'; // Adjust the path as necessary function App() { return ( <div> <HelloWorld /> </div> ); } export default App; ``` ### Setting Up React If you don't already have a React environment set up, the easiest way to start a new React project is by using Create React App: ```bash npx create-react-app my-hello-world-app cd my-hello-world-app npm start ``` After setting up the project, you can replace the contents of `src/App.js` with the code from the `App` function shown above, and create a new file `src/HelloWorld.js` for the `HelloWorld` component. This will start a development server, and you can see your "Hello World" message by navigating to `http://localhost:3000` in your web browser.